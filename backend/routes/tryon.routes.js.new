const express = require('express');
const router = express.Router();
const path = require('path');
const multer = require('multer');
const { spawn } = require('child_process');
const fs = require('fs');

// Configure multer for file upload
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        const uploadDir = path.join(__dirname, '../../test_grad/test_grad/test_images');
        // Ensure the upload directory exists
        if (!fs.existsSync(uploadDir)) {
            fs.mkdirSync(uploadDir, { recursive: true });
        }
        cb(null, uploadDir);
    },
    filename: function (req, file, cb) {
        cb(null, Date.now() + '-' + file.originalname);
    }
});

const upload = multer({ storage: storage });

// Helper function to run Python scripts
const runPythonScript = async (scriptPath, ...args) => {
    return new Promise((resolve, reject) => {
        console.log('Running Python script:', { scriptPath, args });
        const pythonProcess = spawn('python', [scriptPath, ...args]);
        let errorOutput = '';

        pythonProcess.stderr.on('data', (data) => {
            const error = data.toString();
            console.error('Python error:', error);
            errorOutput += error;
        });

        pythonProcess.stdout.on('data', (data) => {
            console.log('Python output:', data.toString());
        });

        pythonProcess.on('close', (code) => {
            console.log('Python process exited with code:', code);
            if (code !== 0) {
                reject(new Error(errorOutput || 'Python script failed'));
            } else {
                resolve();
            }
        });
    });
};

// Try-on endpoint (regular CycleGAN)
router.post('/try-on', upload.single('image'), async (req, res) => {
    try {
        if (!req.file) {
            return res.status(400).json({ message: 'No image file uploaded' });
        }

        const inputImage = req.file.filename;
        const baseDir = path.join(__dirname, '../../test_grad/test_grad');
        const scriptPath = path.join(baseDir, 'test_real_image.py');
        const inputPath = path.join(baseDir, 'test_images', inputImage);
        const outputDir = path.join(baseDir, 'results');

        console.log('Running style transfer:', { inputPath, outputDir });
        
        await runPythonScript(scriptPath, inputPath, outputDir);
        
        // Get the output image path
        const outputImage = path.join(outputDir, `${path.parse(inputImage).name}_fake.png`);
        
        if (!fs.existsSync(outputImage)) {
            throw new Error('Output image was not generated');
        }
        
        // Send the processed image
        res.sendFile(outputImage, (err) => {
            if (err) {
                res.status(500).json({ 
                    message: 'Error sending processed image',
                    error: err.message
                });
            }
        });

    } catch (error) {
        console.error('Error in try-on:', error);
        res.status(500).json({ 
            message: 'Error processing try-on request',
            error: error.message
        });
    }
});

// Glasses try-on endpoint (uses CycleGAN model for style transfer)
router.post('/try-on-glasses', upload.single('image'), async (req, res) => {
    try {
        if (!req.file) {
            return res.status(400).json({ message: 'No image file uploaded' });
        }

        const inputImage = req.file.filename;
        const baseDir = path.join(__dirname, '../../test_grad/test_grad');
        const scriptPath = path.join(baseDir, 'test_real_image.py');
        const inputPath = path.join(baseDir, 'test_images', inputImage);
        const outputDir = path.join(baseDir, 'results');
        
        console.log('Running style transfer:', { 
            script: scriptPath,
            input: inputPath,
            output: outputDir 
        });
        
        await runPythonScript(scriptPath, inputPath, outputDir);
        
        // Get the output image path - note the _fake.png suffix from CycleGAN
        const outputImage = path.join(outputDir, `${path.parse(inputImage).name}_fake.png`);
        
        if (!fs.existsSync(outputImage)) {
            throw new Error('Output image was not generated');
        }
        
        // Send the processed image
        res.sendFile(outputImage, (err) => {
            if (err) {
                console.error('Error sending file:', err);
                res.status(500).json({ 
                    message: 'Error sending processed image',
                    error: err.message
                });
            }
        });

    } catch (error) {
        console.error('Error in try-on-glasses:', error);
        res.status(500).json({ 
            message: 'Error processing try-on request',
            error: error.message
        });
    }
});

module.exports = router;
