// Prisma schema for a Node.js backend with cart, payments (debit card or cash), user roles, products (e.g., glasses), and auth

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enum for payment methods
enum PaymentMethod {
  DEBIT_CARD
  CASH
}

// Enum for order status
enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model User {
  id         Int       @id @default(autoincrement())
  name       String
  email      String    @unique
  password   String
  role       Role      @relation(fields: [roleId], references: [id])
  roleId     Int
  carts      Cart[]    @relation("UserCarts")
  orders     Order[]   @relation("UserOrders")
  reviews    Review[]  @relation("UserReviews")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Role {
  id        Int     @id @default(autoincrement())
  name      String  @unique
  users     User[]
}

model Product {
  id             Int             @id @default(autoincrement())
  name           String
  description    String?
  price          Float
  stockQuantity  Int             @default(0)
  images         ProductImage[]  @relation("ProductImages")
  reviews        Review[]        @relation("ProductReviews")
  cartItems      CartItem[]      @relation("ProductInCarts")
  orderItems     OrderItem[]     @relation("ProductInOrders")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model ProductImage {
  id         Int       @id @default(autoincrement())
  imageUrl   String    // URL or path to image
  product    Product   @relation("ProductImages", fields: [productId], references: [id], onDelete: Cascade)
  productId  Int
  isDefault  Boolean   @default(false)
  createdAt  DateTime  @default(now())
}

model Review {
  id         Int       @id @default(autoincrement())
  rating     Int       // e.g., 1-5 stars
  comment    String?
  user       User      @relation("UserReviews", fields: [userId], references: [id])
  userId     Int
  product    Product   @relation("ProductReviews", fields: [productId], references: [id])
  productId  Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Cart {
  id         Int         @id @default(autoincrement())
  user       User        @relation("UserCarts", fields: [userId], references: [id])
  userId     Int
  items      CartItem[]  @relation("CartItems")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model CartItem {
  id         Int      @id @default(autoincrement())
  cart       Cart     @relation("CartItems", fields: [cartId], references: [id])
  cartId     Int
  product    Product  @relation("ProductInCarts", fields: [productId], references: [id])
  productId  Int
  quantity   Int      @default(1)
}

model Order {
  id                Int             @id @default(autoincrement())
  user              User            @relation("UserOrders", fields: [userId], references: [id])
  userId            Int
  items             OrderItem[]     @relation("OrderItems")
  status            OrderStatus     @default(PENDING)
  paymentMethod     PaymentMethod
  address           String
  phone             String
  total             Float
  cardNumber        String?
  cardHolderName    String?
  cardExpiryMonth   Int?
  cardExpiryYear    Int?
  cardCvv           String?
  createdAt         DateTime        @default(now())
}

model OrderItem {
  id              Int       @id @default(autoincrement())
  order           Order     @relation("OrderItems", fields: [orderId], references: [id])
  orderId         Int
  product         Product   @relation("ProductInOrders", fields: [productId], references: [id])
  productId       Int
  quantity        Int
  priceAtPurchase Float     // capture price at time of purchase
}